(package-initialize) ;; keep

;; macros

;; C-(x k) n     | name last macro
;; M-x i-k-m     | insert keyboard macro with given name
;; (fset 'copy-line
;;       (kmacro-lambda-form [?\C-a ?\C-k ?\C-y return ?\C-a ?\C-y] 0 "%d"))
;; (fset 'line-to-kill-ring
;;       (kmacro-lambda-form [C-S-backspace ?\C-/] 0 "%d"))
;; (fset 'find-next-block-start
;;       (kmacro-lambda-form [?\C-f ?\C-\M-s ?\C-m ?\{ return ?\C-b] 0 "%d"))
;; (fset 'find-previous-block-start
;;       (kmacro-lambda-form [?\C-\M-r return ?\{ return] 0 "%d"))

;; rebinds

;; just unsets
(global-unset-key (kbd "C-x i"))
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-x u"))
;; unset-sets
(global-unset-key (kbd "C-M-c"))
(global-set-key (kbd "C-M-c") 'recompile)
(global-unset-key (kbd "C-M-o"))
(global-set-key (kbd "C-M-o") 'copy-line)
(global-unset-key (kbd "C-S-o"))
(global-set-key (kbd "C-S-o") 'line-to-kill-ring)
;; just sets
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-~") 'hs-toggle-hiding)
(global-set-key (kbd "C-!") 'hs-hide-all)
(global-set-key (kbd "C-#") 'hs-show-all)
(global-set-key (kbd "C-}") 'find-next-block-start)
(global-set-key (kbd "C-{") 'find-previous-block-start)

;; settings
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(put 'set-goal-column 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(setq inhibit-startup-screen t)
(setq hs-block-start-regexp "{\|\[\|(")
(setq hs-block-end-regexp "}\|\]\|)")
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq auto-save-file-name-transforms
      `((".*" ,(concat user-emacs-directory "auto-save/") t)))
(setq org-todo-keywords
      '((sequence "TODO" "WAITING" "|" "DONE")))
(setq-default abbrev-mode t)

;; extension-mode associations

(defun add-org-indent () (org-indent-mode 1))
(add-hook 'org-mode-hook 'add-org-indent)

;; random fsets
(fset 'tm (message "â„¢"))

;; autogenerated stuff

(add-to-list 'load-path "/home/caleb/rust-mode/")
(autoload 'rust-mode "rust-mode" nil t)
(require 'package)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(custom-enabled-themes (quote (manoj-dark)))
 '(desktop-path (quote ("~/.emacs.d/" "~" "~/e/")))
 '(desktop-restore-eager 10)
 '(desktop-save-mode t)
 '(dired-isearch-filenames (quote dwim))
 '(display-line-numbers (quote visual))
 '(elm-tags-on-save t)
 '(fringe-mode 0 nil (fringe))
 '(hs-hide-comments-when-hiding-all nil)
 '(indent-tabs-mode nil)
 '(nil nil t)
 '(org-agenda-files (quote ("~/todo.org")))
 '(org-hide-leading-stars t)
 '(package-archives
   (quote
    (("gnu" . "https://elpa.gnu.org/packages/")
     ("melpa" . "https://melpa.org/packages/"))))
 '(package-selected-packages
   (quote
    (php-mode lua-mode glsl-mode rainbow-delimiters company elm-mode bash-completion rust-mode haskell-mode)))
 '(send-mail-function (quote mailclient-send-it))
 '(show-trailing-whitespace nil)
 '(truncate-lines t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
