{"version":3,"sources":["tree.js","App.js","serviceWorker.js","index.js"],"names":["Node","s","prev","extracted","extractParenthesized","slice","removeOuterParentheses","Lambda","dotPos","indexOf","undefined","rest","lambdaIdent","expressionList","ExpressionList","expr","lambda","length","ident","tail","index","depth","charAt","start","Tree","treeTypes","convert","c","iList","r","includes","code","charCodeAt","String","fromCharCode","printTree","tree","acc","doApplications","node","key","current","argRef","exprRef","arg","copyTree","lam","lamIdent","lamI","traverseTree","i","li","push","console","log","alphaConv","lambdaCopy","append","apply","toAppendRef","nodeRef","toAppend","treeS","noExpr","treeIn","f","traverseTreeHelp","Object","keys","forEach","temp","concat","reduce","resettingTraverse","doneBefore","parse","raw","err","Beta","props","handleInput","ev","preventDefault","stopPropagation","inForm","document","getElementById","myFormData","value","toAdd","low","toLowerCase","startsWith","result","tests","testResults","map","input","expected","actual","notPassed","filter","x","test","this","setState","outText","state","bind","toggleInfo","getInfo","info","id","className","onSubmit","action","type","spellCheck","autoComplete","rows","disabled","style","visibility","onClick","React","Component","Something","enabled","collapse","src","alt","App","betaEnable","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yRAoBMA,G,MACF,WAAYC,GAAI,oBACnBA,EA8CD,SAAgCA,GAC5B,GAAS,KAANA,EAAU,CAChB,IAAIC,EACAC,EACJ,EAAG,CACCD,EAAOD,EADR,MAEgBG,EAAqBH,GAFrC,mBAEEE,EAFF,KAGCF,EAAIA,EAAEI,MAAM,GAAG,SACVJ,IAAME,GACf,OAAOD,EACG,OAAOD,EAxDbK,CAAuBL,KAItBM,E,YACF,WAAYN,GAAI,IAAD,sBAClB,4CAAMA,IAEN,IAAIO,EAASP,EAAEQ,QAAQ,KACvB,GAAc,IAAXD,QAAkCE,IAAlBT,EAAEO,EAAS,GAAkB,KAAM,+BACtD,IAAIG,EAAOV,EAAEI,MAAMG,EAAS,GALV,OAMlB,EAAKI,YAAcX,EAAEA,EAAEQ,QAAQ,MAAQ,GACvC,EAAKI,eAAiB,IAAIC,EAAeH,GAPvB,E,2BADEX,GAYfc,E,YACF,WAAYb,GAAI,IAAD,sBAClB,4CAAMA,IACN,IAAIU,EACAI,EAAOd,EAHO,EAIHG,EAAqBH,GAJlB,mBAKlB,GADCc,EAJiB,KAIXJ,EAJW,KAKH,OAAZI,EAAK,GACJ,EAAKC,OAAS,IAAIT,EAAOQ,GACtBJ,EAAKM,OAAS,IAAG,EAAKJ,eAAiB,IAAIC,EAAeH,QAE5D,CACD,EAAKO,MAAQH,EAAK,GAClB,IAAII,EAAOJ,EAAKV,MAAM,GAAKM,EACxBQ,EAAKF,OAAS,IAAG,EAAKJ,eAAiB,IAAIC,EAAeK,IAZ/C,S,2BADUnB,GA2C7B,SAASI,EAAqBH,EAAGmB,QAIhBV,IAAVU,IAAqBA,EAAQ,GAChC,IAAIC,EAAQ,EACZ,GAAuB,MAApBpB,EAAEqB,OAAOF,GAAgB,MAAO,CAACnB,EAAE,IAGtC,IADA,IAAIsB,IADJH,EAEMA,EAAQnB,EAAEgB,OAAS,EAAGG,IAAS,CACjC,GAAuB,MAApBnB,EAAEqB,OAAOF,GAAgB,CACxB,GAAa,IAAVC,EAAa,MAAO,CAACpB,EAAEI,MAAMkB,EAAOH,GAAOnB,EAAEI,MAAMe,EAAQ,IAG1DC,IAGe,MAApBpB,EAAEqB,OAAOF,IACRC,IAGR,KAAM,0BAGK,OAAEG,K,YAhDb,WAAYvB,GAAI,IAAD,6BAClB,4CAAMA,IACG,KAANA,IAAU,EAAKY,eAAiB,IAAIC,EAAeb,IAFpC,E,2BADAD,ICjDbyB,EAAY,CAAC,SAAU,iBAAkB,SA6D/C,SAASC,EAAQC,EAAGC,GAEhB,IADA,IAAIC,EAAI,IACFD,EAAME,SAASD,IAAI,CACrB,IAAIE,EAAOF,EAAEG,WAAW,GACZ,MAATD,IAAcA,EAAO,IACZ,KAATA,IAAaA,EAAO,IACvBF,EAAII,OAAOC,aAAaH,EAAO,GAEnC,OAAOF,EAIX,SAASM,EAAUC,GAEf,IAAIC,EAAM,GAmBV,YAlBY3B,IAAT0B,SACa1B,IAAhB0B,EAAKpB,SACJqB,GAAOF,EAAUC,EAAKpB,cAERN,IAAf0B,EAAKlB,QACJmB,GAAOD,EAAKlB,YAEQR,IAArB0B,EAAKxB,aACGyB,GAAO,IACdA,GAAO,KACPA,GAAOD,EAAKxB,YACZyB,GAAO,IACPA,GAAOF,EAAUC,EAAKvB,gBACfwB,GAAO,UACgB3B,IAAxB0B,EAAKvB,iBACXwB,GAAOF,EAAUC,EAAKvB,kBAGhBwB,EAGX,IAAIC,EAAiB,SAASC,EAAMC,GAChC,QAAmB9B,IAAhB6B,EAAKvB,aAAgDN,IAAxB6B,EAAK1B,eAA8B,CACtE,IAAI4B,EAAUF,EAGP,MAAO,EAAC,EADfA,EA2CD,SAAeG,EAAQC,GACnB,IAAIC,EAAMC,EAASH,GAEfI,EAAMH,EAAQ3B,OAClB,QAA0BN,IAAvBoC,EAAIjC,eAA8B,KAAM,2CAC3C,IAAIkC,EAAWD,EAAIlC,YACfG,EAnHR,SAAmB2B,EAAQC,EAASK,GAChC,IAAIJ,EAAMC,EAASH,GACf3B,EAAO8B,EAASF,GAChBf,EAAQ,GAoBZ,OAnBAqB,EAAaL,EAAK,IAAI,SAACL,EAAMC,GACzB,QAAY9B,IAAT6B,EAAoB,CACnB,IAAIW,EAAIX,EAAKrB,MACTiC,EAAKZ,EAAK3B,iBACLF,IAANwC,GAAoBtB,EAAME,SAASoB,IAAItB,EAAMwB,KAAKF,QAC3CxC,IAAPyC,GAAqBvB,EAAME,SAASqB,IAAKvB,EAAMwB,KAAKD,OAG/DE,QAAQC,IAAI1B,GACZqB,EAAalC,EAAM,IAAI,SAACwB,EAAMC,GAQ1B,YAPK9B,IAAT6B,SACmB7B,IAAf6B,EAAKrB,OAAuBU,EAAME,SAASS,EAAKrB,OACxCqB,EAAKrB,MAAQQ,EAAQa,EAAKrB,MAAOU,QACblB,IAArB6B,EAAK3B,aAA6BgB,EAAME,SAASS,EAAK3B,eACrD2B,EAAK3B,YAAcc,EAAQa,EAAK3B,YAAagB,KAG9CW,KAEJxB,EA4FIwC,CAAUb,EAAQC,GAC7BM,EAAalC,EAAKC,OAAQ,IAAI,SAACuB,EAAMC,GACxC,QAAY9B,IAAT6B,GAAsBA,EAAKrB,QAAU6B,EAAU,CAE9C,GADAR,EAAKrB,WAAQR,OACKA,IAAfkC,EAAI5B,OAAsB,CAChC,IAAIwC,EAAaX,EAASD,EAAI5B,QAC9BuB,EAAKvB,OAASwC,OAEM9C,IAAdkC,EAAI1B,QACVqB,EAAKrB,MAAQ0B,EAAI1B,OAKlB,OAAOqB,KAGJxB,EAAKF,eAAiBE,EAAKF,eAAeA,oBAERH,IAA/BK,EAAKC,OAAOH,gBACXE,EAAOA,EAAKC,OAAOH,eAC1BE,EAAO0C,EAAOb,EAAI/B,eAAgBE,KAG3BA,EAAKC,OAAOH,eAAiB4C,EAAO1C,EAAKF,eAAgBE,EAAKC,OAAOH,gBAGrEE,EAAKF,eAAiBE,EAAKC,OAAOH,eAKlCE,EAAKC,YAASN,GAGlB,OAAOK,EApFH2C,CADInB,EAAK1B,eACG4B,IAET,MAAO,EAAC,EAAOF,IAiB1B,SAASkB,EAAOE,EAAaC,GACzB,IAAIC,EAAWhB,EAASc,GACpBpB,EAAOM,EAASe,GACpB,QAAYlD,IAAT6B,QAAmC7B,IAAbmD,EAAwB,OAAOtB,EACxD,QAA2B7B,IAAxB6B,EAAK1B,eAA8B0B,EAAK1B,eAAiBgD,MACvD,CACR,IAAI9C,EAAOwB,EAAK1B,eAChB0B,EAAK1B,eAAiB4C,EAAOI,EAAU9C,GAEpC,OAAOwB,EAKX,SAASM,EAAST,GACd,IAAI0B,EAAQ3B,EAAUC,GAElB2B,EADU,IAAIvC,EAAKA,KAAKsC,GACPjD,eACrB,YAAcH,IAAXqD,QACqBrD,IAAlBqD,EAAO/C,aACSN,IAAhB0B,EAAKpB,OAA6B+C,EAAO/C,OACnC+C,EA2DhB,SAASd,EAAae,EAAQ3B,EAAK4B,GAC/B,IAAI7B,EAAO,IAAIZ,EAAKA,KAAK,IAGzB,OAFAY,EAAKvB,eAAiBmD,EACtB3B,EAfJ,SAAS6B,EAAiB9B,EAAMC,EAAK4B,GASjC,OAReE,OAAOC,KAAKhC,GAClBiC,SAAQ,SAAC7B,GACrB,GAAGf,EAAUK,SAASU,SAAsB9B,IAAd0B,EAAKI,GAAoB,CACnD,IAAI8B,EAAOL,EAAE7B,EAAKI,GAAMA,QACZ9B,IAAT4D,IAAoBjC,EAAMA,EAAIkC,OAAOD,IACxCJ,EAAiB9B,EAAKI,GAAMH,EAAK4B,OAG3B5B,EAMD6B,CAAiB9B,EAAMC,EAAK4B,GAsBtC,SAASO,EAAOpC,GAIZ,OADAA,EAlBJ,SAASqC,EAAkBrC,EAAM6B,GAC7B,IAAIS,GAAa,EACjB,EAAG,CACCA,GAAa,EACEP,OAAOC,KAAKhC,GAClBiC,SAAQ,SAAC7B,GACrB,GAAGf,EAAUK,SAASU,SAAsB9B,IAAd0B,EAAKI,KAAuBkC,EAAY,CAAC,IAAD,EACxCT,EAAE7B,EAAKI,GAAMA,GAD2B,mBACjEkC,EADiE,KACrDtC,EAAKI,GADgD,KAEvDkC,GAAYD,EAAkBrC,EAAKI,GAAMyB,aAGjDS,GACR,OAAOtC,EAMAqC,CAAkBrC,EAAME,GAInC,SAASqC,EAAMC,GACX,IAAIxC,EACJ,IAGH,OADAoC,EADOpC,EAAO,IAAIZ,EAAKA,KAAKoD,IAErBzC,EAAUC,GACZ,MAAMyC,GACJ,MAAM,6BAAN,OAAoCA,I,IAItCC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAUVC,YAAc,SAASC,GACnBA,EAAGC,iBACHD,EAAGE,kBACH,IAAMC,EAASC,SAASC,eAAe,MACjCC,EAAaH,EAAOI,MAC1BJ,EAAOI,MAAQ,GACf,IAAIC,EAAQF,EAERG,EAAMH,EAAWI,cAoCrB,OAnCGD,EAAIE,WAAW,YACdH,EAAQ,kMAGFC,EAAIE,WAAW,QACrBH,EA3QZ,WACI,IAAII,EAAS,GACTC,EAAQ,CACf,CAAC,WACC,KACF,CAAC,8BACC,KACF,CAAC,mCACC,mBACF,CAAC,SACC,UACK,CAAC,YACC,OAEFC,EAAcD,EAAME,KAAI,YAAwB,IAAD,mBAArBC,EAAqB,KAAdC,EAAc,KAClDC,EAASxB,EAAMsB,GACnB,OAAGE,IAAWD,EACJ,UAAN,OAAiBD,EAAjB,uBAAqCC,EAArC,qBAA0DC,EAA1D,MACUA,KAEPC,EAAYL,EAAYM,QAAO,SAAAC,GAAC,OAAIA,EAAEV,WAAW,cAUrD,OATwB,IAArBQ,EAAUnF,QACT4E,GAAU,8BACVC,EAAME,KAAI,WAAoB9C,GAAO,IAAD,mBAAxB+C,EAAwB,UAChCJ,GAAM,iBAAcI,EAAd,qBAAgCF,EAAY7C,GAA5C,UAIVkD,EAAUJ,KAAI,SAAAM,GAAC,OAAIT,GAAUS,KAE1BT,EA6OSU,GACFb,EAAIE,WAAW,QACrBH,EAAQ,kuCAoBZA,EAAMxE,OAAS,IAAGwE,EAAQd,EAAMc,IAGhCA,GAAS,KAETe,KAAKC,SAAS,CACVC,QAASjB,EAAQe,KAAKG,MAAMD,WAEzB,GArDP,EAAK1B,YAAc,EAAKA,YAAY4B,KAAjB,gBACnB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBACf,EAAKD,MAAQ,CACTD,QAAS,wDACTK,MAAM,GAPK,E,0EA2DfP,KAAKC,SAAS,CACVM,MAAOP,KAAKG,MAAMI,S,gCAKtB,OAAIP,KAAKG,MAAMI,KAgBX,yBAAKC,GAAG,aAAR,mBACkB,6BADlB,0pBAWE,6BACA,6BAZF,gCAcE,4BACE,2DACA,gDACA,+CACA,oEACA,oEACA,8DACA,+DACA,kEACA,4EACA,kFACA,4BACE,2GACA,oGACA,yGACA,sIAEA,kFAEF,iFACA,4BACE,gGACA,6FACA,+FAGJ,6BAxCF,iEAfA,yBAAKA,GAAG,cACN,sFAEE,6BACA,6BACA,6BACA,6BACA,6BANF,6I,+BA6DN,OACI,yBAAKC,UAAU,WACb,0BAAMC,SAAUV,KAAKxB,YAAamC,OAAO,KACvC,2BACEC,KAAK,OACLC,WAAW,QACXC,aAAa,MACbN,GAAG,OAEZ,8BACSK,WAAW,QACXE,KAAK,KACLC,UAAQ,EACRhC,MAAOgB,KAAKG,MAAMD,QAClBM,GAAG,QAEL,2BAAOI,KAAK,SAAS5B,MAAM,OAAOiC,MAAO,CAACC,WAAY,aAExD,yBAAKV,GAAG,OAAOW,QAASnB,KAAKK,YAC1BL,KAAKM,gB,GApJHc,IAAMC,WA2JzB,SAASC,EAAU/C,GACf,MAAqB,SAAlBA,EAAMgD,QAED,yBAAKf,GAAG,QACN,yBAAKA,GAAG,iBAAiBW,QAAS5C,EAAMiD,UACtC,yBAAKhB,GAAG,QACL,IADH,eAIF,kBAAC,EAAD,OAKF,yBAAKA,GAAG,UACN,gCACE,oEACA,yBAAKiB,IAAI,WAAWN,QAAS5C,EAAM4C,QAC9BO,IAAI,gCACT,wBAAIjB,UAAU,OAAOD,GAAG,UAAxB,gC,IAkDDmB,E,YAxCX,WAAYpD,GAAQ,IAAD,8BACf,4CAAMA,KACDqD,WAAa,EAAKA,WAAWxB,KAAhB,gBAClB,EAAKoB,SAAW,EAAKA,SAASpB,KAAd,gBAChB,EAAKD,MAAQ,CACToB,QAAS,QALE,E,0EAUfvB,KAAKC,SAAS,CACVsB,QAAS,W,iCAKbvB,KAAKC,SAAS,CACVsB,QAAS,W,+BAKb,OACI,yBAAKd,UAAU,uBACb,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,iBACb,yBAAKD,GAAG,WACN,kBAACc,EAAD,CACEE,SAAUxB,KAAKwB,SACfL,QAASnB,KAAK4B,WACdL,QAASvB,KAAKG,MAAMoB,kB,GA/BxBH,IAAMC,WCralBQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzC,QACfmC,UAAUC,cAAcQ,YAI1BlG,QAAQC,IACN,iHAKEuF,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlB7F,QAAQC,IAAI,sCAGRuF,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACLtG,QAAQsG,MAAM,4CAA6CA,MCzFjEC,IAASC,OAAO,kBAAC,EAAD,MAASxE,SAASC,eAAe,SDe1C,SAAkBuD,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBxB,OAAOC,SAASwB,MACpDC,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMmB,GAAN,sBAEP1B,IAgEV,SAAiCO,EAAOC,GAEtCsB,MAAMvB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BnB,MAAK,SAAAoB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAY7J,QAAQ,cAG5CqI,UAAUC,cAAc0B,MAAMxB,MAAK,SAAAC,GACjCA,EAAawB,aAAazB,MAAK,WAC7BV,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLrG,QAAQC,IACN,oEAvFAsH,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMxB,MAAK,WACjC5F,QAAQC,IACN,iHAMJqF,EAAgBC,EAAOC,OCtC/BE,K","file":"static/js/main.05b69887.chunk.js","sourcesContent":["/* by Caleb Spiess/Gigabitten\n * \n * Excuse the wall of text, but this was like a 20 hour journey for me.\n * \n * Honestly, this was a blast to make. old.js has my first attempt, and I tried to do this and reduce \n * the lambda expressions at the same time, all without much of any abstraction. It was buggy and\n * horrible. I'm pretty sure I could have parsed this with a library, but I'm so happy I didn't,\n * because it showed me just how deeply valuable abstraction is. I wrote a slightly different version\n * of the formal grammar at the bottom before the terrible failure of old.js - the problem wasn't that\n * I didn't understand the structure, the problem was that I didn't understand how to structure the\n * code. I also learned a lot of small things while making this, like how to write a formal grammar\n * and how to make a basic regex. This is also the first time I've used classes as an abstraction\n * without being explicitly directed to, and I'm not sure this is what I'm supposed to use the\n * constructors for but it worked really really well. \n * \n * Finally, I did a revision where I simplified the structure a ton. It used to have a bunch of stuff\n * that conceptually made sense, but failed to capture the structure well enough - I eventually did\n * away with the identList abstraction and even the Expression abstraction and decided that I'd just\n * store the properties of each Expression in ExpressionList and let identifiers be expressions.\n */\nclass Node {\n    constructor(s) {\n\ts = removeOuterParentheses(s);\n    }\n}\n\nclass Lambda extends Node {\n    constructor(s) {\n\tsuper(s);\n\t// note: only single-argument lambdas\n\tlet dotPos = s.indexOf(\".\");\n\tif(dotPos !== 2 || s[dotPos + 1] === undefined) throw \"Malformed lambda expression!\";\n\tlet rest = s.slice(dotPos + 1);\n\tthis.lambdaIdent = s[s.indexOf(\"\\\\\") + 1];\n\tthis.expressionList = new ExpressionList(rest);\n    }\n}\n\nclass ExpressionList extends Node {\n    constructor(s) {\n\tsuper(s);\n\tlet rest = \"\";\n\tlet expr = s;\n\t[expr, rest] = extractParenthesized(s);\n\tif(expr[0] === \"\\\\\") {\n\t    this.lambda = new Lambda(expr);\n\t    if(rest.length > 0) this.expressionList = new ExpressionList(rest);\n\t}\n\telse {\n\t    this.ident = expr[0];\n\t    let tail = expr.slice(1) + rest;\n\t    if(tail.length > 0) this.expressionList = new ExpressionList(tail);\n\t}\n    }\n}\n\nclass Tree extends Node {\n    constructor(s) {\n\tsuper(s);\n\tif(s !== \"\") this.expressionList = new ExpressionList(s);\n    }\n}\n/* deprecated after restructuring\nfunction isIdentList(s) {\n    const identReg = /([^()A-Za-z])+/;\n    return !identReg.test(s);\n}\n*/\nfunction removeOuterParentheses(s) {\n    if(s !== \"\") {\n\tlet prev;\n\tlet extracted;\n\tdo { \n\t    prev = s;\n\t    [extracted,] = extractParenthesized(s);\n\t    s = s.slice(1,-1);\n\t} while (s === extracted);\n\treturn prev;\n    } else return s;\n}\n\nfunction extractParenthesized(s, index) {\n    // Finds the index of a right parenthese associated with a given left parenthese at the beginning\n    // returns the original string if the first character isn't a parenthese\n    // accepts 0 as a default argument for index\n    if(index === undefined) index = 0;\n    let depth = 0;\n    if(s.charAt(index) !== \"(\") return [s,\"\"];\n    index++;\n    let start = index;\n    for(; index < s.length + 1; index++) {\n        if(s.charAt(index) === \")\") {\n            if(depth === 0) return [s.slice(start, index),s.slice(index + 1)];\n\t    // the first is the parenthesized bit sans parentheses, the second is the remainder\n            else {\n                depth--;\n            }\n        }\n        if(s.charAt(index) === \"(\") {\n            depth++;\n        }\n    }\n    throw \"Mismatched parentheses!\";\n}\n\nexport default { Tree };\n","/* by Caleb Spiess/Gigabitten\n * This was an adventure. I didn't think it would take so long, but I'm glad I did it.\n */\nimport React from 'react';\nimport './App.css';\nimport Tree from './tree.js';\n\nconst treeTypes = [\"lambda\", \"expressionList\", \"ident\"];\n\nfunction test() { // for some reason I couldn't get assert working, but building my own was very easy\n    let result = \"\";\n    let tests = [\n\t[\"(\\\\a.a)b\"\n\t ,\"b\"],\n\t[\"(\\\\a.a)(\\\\x.\\\\y.xy)(\\\\h.h)p\"\n\t ,\"p\"],\n\t[\"(\\\\w.\\\\y.\\\\x.y(wyx))(\\\\s.\\\\z.sz)\"\n\t ,\"(\\\\y.(\\\\x.yyx))\"],\n\t[\"potato\"\n\t ,\"potato\"],\n        [\"(\\\\x.yx)y\"\n         ,\"ay\"],\n    ];\n    let testResults = tests.map(([input, expected]) => {\n\tlet actual = parse(input);\n\tif(actual !== expected) {\n\t    return `Input: ${input}\\nExpected: ${expected}\\nActual: ${actual}\\n`;\n\t} else return actual;\n    });\n    let notPassed = testResults.filter(x => x.startsWith('Input: '));\n    if(notPassed.length === 0) {\n        result += \"Passed every test case!\\n\\n\";\n        tests.map(([input, expected], i) => {\n            result += `Input: ${input}\\nResult: ${testResults[i]}\\n`;\n        });\n    }\n    else {\n        notPassed.map(x => result += x);\n    }\n    return result;\n}\n\nfunction alphaConv(argRef, exprRef, lamI) {\n    let arg = copyTree(argRef);\n    let expr = copyTree(exprRef);\n    let iList = [];\n    traverseTree(arg, [], (node, key) => {\n        if(node !== undefined) {\n            let i = node.ident;\n            let li = node.lambdaIdent;\n            if(i !== undefined && !iList.includes(i)) iList.push(i);\n            if(li !== undefined && !iList.includes(li)) iList.push(li);\n        }\n    });\n    console.log(iList);\n    traverseTree(expr, [], (node, key) => {\n\tif(node !== undefined) {\n\t    if(node.ident !== undefined && iList.includes(node.ident)) {\n                node.ident = convert(node.ident, iList);\n\t    } else if(node.lambdaIdent !== undefined && iList.includes(node.lambdaIdent)) {\n                node.lambdaIdent = convert(node.lambdaIdent, iList);\n            }\n        }\n        return node;\n    });\n    return expr;\n}\n\nfunction convert(c, iList) {\n    let r = 'a';\n    while(iList.includes(r)) {\n        let code = r.charCodeAt(0);\n        if(code === 122) code = 65; \n        if(code === 90) code = 97; \n        r = String.fromCharCode(code + 1);\n    }\n    return r;\n    // 65 = 'A', 90 = 'Z', 97 = 'a', 122 = 'z'\n}\n\nfunction printTree(tree) {\n    // who's ready for a lot of undefined checking and recursion\n    let acc = \"\";\n    if(tree !== undefined) {\n\tif(tree.lambda !== undefined) {\n\t    acc += printTree(tree.lambda);\n\t}\n\tif(tree.ident !== undefined) {\n\t    acc += tree.ident;\n\t}\n\tif(tree.lambdaIdent !== undefined) {\n            acc += \"(\";\n\t    acc += \"\\\\\";\n\t    acc += tree.lambdaIdent;\n\t    acc += \".\";\n\t    acc += printTree(tree.expressionList);\n            acc += \")\";\n\t} else if(tree.expressionList !== undefined) {\n\t    acc += printTree(tree.expressionList);\n\t}\n    }\n    return acc;\n}\n\nlet doApplications = function(node, key) {\n    if(node.lambda !== undefined && node.expressionList !== undefined) {\n\tlet current = node;\n\tlet next = node.expressionList;\n\tnode = apply(next, current);\n        return [true, node];\n    } else return [false, node];\n    // yep, that's the hack alright\n}\n/* deprecated; didn't even work very well, do not re-enable without care, probably buggy or useless\n  function cleanTree(tree) {\n  tree = traverseTree(tree, (node, key) => {\n  if(key === \"expressionList\"\n  && node.expressionList !== undefined\n  && node.ident === undefined\n  && node.lambda === undefined) {\n  node = node.expressionList;\n  }\n  return node;\n  });\n  return tree;\n  }\n*/ \nfunction append(toAppendRef, nodeRef) {\n    let toAppend = copyTree(toAppendRef);\n    let node = copyTree(nodeRef);\n    if(node === undefined || toAppend === undefined) return node;\n    if(node.expressionList === undefined) node.expressionList = toAppend;\n    else {\n\tlet expr = node.expressionList;\n\tnode.expressionList = append(toAppend, expr);\n    }\n    return node;\n}\n// Before, an expression as simple as (\\x.xx)(\\a.a) was failing because after the substitution to\n// (\\a.a)(\\a.a) (\\a.a) was being applied to its own literal self, which is dumb. This avoids that\n// by leveraging the way printTree and the Tree.Tree constructor work.\nfunction copyTree(tree) {\n    let treeS = printTree(tree);\n    let newTree = new Tree.Tree(treeS);\n    let noExpr = newTree.expressionList;\n    if(noExpr !== undefined\n       && noExpr.lambda !== undefined\n       && tree.lambda === undefined) return noExpr.lambda;\n    else return noExpr;\n}\n\nfunction apply(argRef, exprRef) {\n    let arg = copyTree(argRef);\n    //    console.log(`Applying ${printTree(arg)} to ${printTree(expr)}...`);\n    let lam = exprRef.lambda;\n    if(lam.expressionList === undefined) throw \"Lambdas need to be applied to something!\";\n    let lamIdent = lam.lambdaIdent;\n    let expr = alphaConv(argRef, exprRef, lamIdent);\n    traverseTree(expr.lambda, [], (node, key) => {\n\tif(node !== undefined && node.ident === lamIdent) {\n\t    node.ident = undefined;\n\t    if(arg.lambda !== undefined) {\n\t\tlet lambdaCopy = copyTree(arg.lambda);\n\t\tnode.lambda = lambdaCopy;\n\t    }\n\t    if(arg.ident !== undefined) {\n\t\tnode.ident = arg.ident;\n\t    }\n\t    // NOTE: not copying arg's expressionList, because that would be a self-referencing object\n\t    // not always, but quite often. Also you get errors if all that validation isn't there.\n\t}\n\treturn node;\n    });\n    \n    expr.expressionList = expr.expressionList.expressionList; // cuts expr.expressionList out\n    // do this part whether or not arg is defined; for instance, (\\y.ab) should result in ab\n    if(expr.lambda.expressionList !== undefined) { \n        expr = expr.lambda.expressionList;\n\texpr = append(arg.expressionList, expr);\n    }\n    else {\n        expr.lambda.expressionList = append(expr.expressionList, expr.lambda.expressionList);\n        // expr.expressionList is all the expressions in the main list except the first (since\n        // it got cut out), so now expr.lambda.expressionList has the args tacked on\n        expr.expressionList = expr.lambda.expressionList;\n        // expr.lambda.expressionList was just used as storage basically. Now, the lambda's old\n        // expressionList and the rest of the arguments are on the top level. This works whether\n        // there's another lambda chained or not. \n        // The only thing left to do is clean up.\n        expr.lambda = undefined;\n    }\n    \n    return expr;\n}\n// f should be a function which takes a node and what kind of node it is as a string\nfunction traverseTreeHelp(tree, acc, f) {\n    let treeKeys = Object.keys(tree);\n    treeKeys.forEach((key) => {\n\tif(treeTypes.includes(key) && tree[key] !== undefined) {\n\t    let temp = f(tree[key], key);\n\t    if(temp !== undefined) acc = acc.concat(temp);\n\t    traverseTreeHelp(tree[key], acc, f);\n\t}\n    });\n    return acc;\n}\n\nfunction traverseTree(treeIn, acc, f) {\n    let tree = new Tree.Tree(\"\");\n    tree.expressionList = treeIn;\n    acc = traverseTreeHelp(tree, acc, f);\n    return acc;\n}\n// This is a lot like traverseTree, except it resets whenever it applies the function. This is\n// basically just a hack to make sure the expression gets fully evaluated. As part of the hack,\n// any function that's used here will need to return a boolean indicating if it mutated the tree,\n// as well as its result\nfunction resettingTraverse(tree, f) {\n    let doneBefore = false;\n    do {\n        doneBefore = false;\n        let treeKeys = Object.keys(tree);\n        treeKeys.forEach((key) => {\n\t    if(treeTypes.includes(key) && tree[key] !== undefined && !doneBefore) {\n\t        [doneBefore, tree[key]] = f(tree[key], key);\n                if(!doneBefore) resettingTraverse(tree[key], f);\n            }\n        });\n    } while(doneBefore);\n    return tree;\n}\n\nfunction reduce(tree) {\n    // This is just an abstraction in case the tree needs several steps of processing. In an earlier\n    // version, it did. In this one, it looks silly, but this structure is more maintainable.\n    tree = resettingTraverse(tree, doApplications);\n    return tree;\n}\n\nfunction parse(raw) {\n    let tree;\n    try {\n        tree = new Tree.Tree(raw);\n\treduce(tree);\n\treturn printTree(tree);\n    } catch(err) {\n        return `Failed to parse! \\nError: ${err}`;\n    }\n}\n\nclass Beta extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleInput = this.handleInput.bind(this);\n        this.toggleInfo = this.toggleInfo.bind(this);\n        this.getInfo = this.getInfo.bind(this);\n        this.state = {\n            outText: \"Type 'info' to learn about this if you haven't yet!\\n\",\n            info: false,\n        };\n    }\n\n    handleInput = function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n        const inForm = document.getElementById(\"in\");\n        const myFormData = inForm.value;\n        inForm.value = \"\";\n        let toAdd = myFormData;\n\n        let low = myFormData.toLowerCase();\n        if(low.startsWith(\"commands\")) {\n            toAdd = \"test: runs some pre-built tests I set up to verify that everything is in order\\n\"\n                + \"info: displays a bunch of information about this console\\n\"\n                + \"commands: I hope you've figured this one out by now\\n\";\n        } else if(low.startsWith(\"test\")) {\n            toAdd = test();\n        } else if(low.startsWith(\"info\")) {\n            toAdd = \"There's a lot here! This frankly took way, way too long to make. A few notes to \"\n                + \"start. First, if you're not \"\n                + \"familiar with the lambda calculus, you can read up on it on its wikipedia page, \"\n                + \"which, unlike how Wikipedia handles most mathematical topics, is actually a solid \"\n                + \"introduction.\\n\\n\"\n                + \"Second, my checks for malformed input are fine, but not crazy robust, so don't \"\n                + \"expect your browser tab not to freeze if you put nonsense in, what with all the \"\n                + \"recursion going on to make this thing work.\\n\\n\"\n                + \"Third, this thing definitely still has some small bugs, so if you try anything too\"\n                + \" crazy like multiplication or addition of numbers greater than 2 it's liable to \"\n                + \"freeze up, and I'm not sure how to keep it from freezing up on failure. You can \"\n                + \"close the tab and then press ctrl+shift+t to open it back up if this happens. \"\n                + \"If you happen to find a simple test case, please open an issue on github or \"\n                + \"contact me at spiesscaleb@gmail.com.\\n\\n\"\n                + \"Finally, if you just want to get to the point, type 'test' to \"\n                + \"see some test cases I set up which are complex and varied enough to pretty well \"\n                + \"verify that this thing works. Otherwise, type 'commands' to get started!\\n\\n\"\n                + \"Oh, and, uh, I definitely overdid this... I got just a bit obsessed. It was \"\n                + \"a lot of fun at least!\\n\"; \n        } else { // doing the text that way was a pretty bad idea honestly\n\t    if(toAdd.length > 0) toAdd = parse(toAdd);\n        }\n        \n        toAdd += \"\\n\";\n        \n        this.setState({\n            outText: toAdd + this.state.outText,\n        });\n        return false;\n    }\n\n    toggleInfo() {\n        this.setState({\n            info: !this.state.info,\n        });\n    }\n\n    getInfo() {\n        if(!this.state.info) return (\n            <div id=\"hiddenInfo\">\n              <center>\n                Click to reveal a whole bunch of non-critical info!\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                Note: \n                App.js, lambda.css, and tree.js were made by me. All but scattered fragments of the\n                remainder was generated by create-react-app. \n              </center>\n            </div>\n        );\n        else return (\n            <div id=\"shownInfo\">\n              (click to hide) <br />\n              This took ages. It was less than 100 hours, but more than 50; a ton of the code for this\n              was insanely abstract. As I mention in the info,\n              I really do not encourage such a high expectation from my future class projects. I just\n              thought this would be fun to make - and while I was right, and I learned an absurd\n              amount, I also dumped a crazy amount of time into it. I'm really proud of the final\n              result, though. The very first result I found online for a lambda calculus evaluator \n              doesn't even correctly apply the successor function to the representation for 1! But\n              this does. I'm pretty sure this will give correct answers except when alpha conversion\n              is necessary.\n              <br />\n              <br />\n              While making this, I learned:\n              <ul>\n                <li>how to use create-react-app</li>\n                <li>how to use React</li>\n                <li>a bit about CSS</li>\n                <li>a lot about the methods under Object</li>\n                <li>how to define a package, in practice</li>\n                <li>how to define a formal grammar</li>\n                <li>a lot about the lambda calculus</li>\n                <li>how to use the in-browser debugger</li>\n                <li>how to debug recursive functions (carefully)</li>\n                <li>how to structure a program and not have it explode</li>\n                <ul>\n                  <li>model-view separation (the original version didn't have this, it was awful)</li>\n                  <li>escape React as soon as possible, unidirectional data flow is a trap</li>\n                  <li>even if you only use a function once, separation of concerns is important</li>\n                  <li>write pseudocode for the tricky parts or logic errors will be frequent\n                    and far more difficult to debug</li>\n                  <li>don't be afraid to rewrite things that don't work</li>\n                </ul>\n                <li>as well as several quirks of Javascript, such as:</li>\n                <ul>\n                  <li>undefined is its own type, but null is an object for some reason</li>\n                  <li>JS is pass by value, but objects as arguments pass references</li>\n                  <li>undefined is surprisingly useful for indeterminate traversals</li>\n                </ul>\n              </ul>\n              <br />\n              This was honestly a bit of a treat. I really loved making it. \n            </div>\n        );\n    }\n    \n    render(){\n        return (\n            <div className=\"display\">\n              <form onSubmit={this.handleInput} action=\"#\">\n                <input\n                  type=\"text\"\n                  spellCheck=\"false\"\n                  autoComplete=\"off\"\n                  id=\"in\"\n                ></input>\n\t        <textarea\n                  spellCheck=\"false\"\n                  rows=\"15\"\n                  disabled\n                  value={this.state.outText}\n                  id=\"out\"\n                ></textarea>\n                <input type=\"submit\" value=\"heck\" style={{visibility: 'hidden'}}></input>\n              </form>\n              <div id=\"info\" onClick={this.toggleInfo}>\n                {this.getInfo()}\n              </div>\n            </div>\n        );\n    }\n}\n// I hate react so much, this is so unnecessary and roundabout without any clear benefit\nfunction Something(props) {\n    if(props.enabled === \"beta\") {\n        return (\n            <div id=\"beta\">\n              <div id=\"collapseButton\" onClick={props.collapse}>\n                <div id=\"back\">\n                  {\"<\"}-- Go Back\n                </div>\n              </div>\n              <Beta />\n            </div>\n        );\n    } else {\n        return (\n            <div id=\"images\">\n              <center>\n                <h1>Projects - Click one to get started!</h1>\n                <img src=\"beta.png\" onClick={props.onClick}\n                     alt=\"lambda calculus interpreter\"></img>\n                <h1 className=\"mt-5\" id=\"bottom\">\n                  by Caleb Spiess/Gigabitten  \n                </h1>\n              </center>\n            </div>\n        );\n    }\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.betaEnable = this.betaEnable.bind(this);\n        this.collapse = this.collapse.bind(this);\n        this.state = {\n            enabled: \"none\",\n        };\n    }\n\n    betaEnable() {\n        this.setState({\n            enabled: \"beta\",\n        });\n    }\n\n    collapse() {\n        this.setState({\n            enabled: \"none\",\n        });\n    }\n        \n    render() {\n        return (\n            <div className=\"container-fluid app\">\n              <div className=\"row d-flex justify-content-center\">\n                <div className=\"col-sm-11 m-3\">\n                  <div id=\"choices\">\n                    <Something\n                      collapse={this.collapse}\n                      onClick={this.betaEnable}\n                      enabled={this.state.enabled}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>        \n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}